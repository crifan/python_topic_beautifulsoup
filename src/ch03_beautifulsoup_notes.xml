<?xml version='1.0' encoding="utf-8"?>

<!DOCTYPE chapter
[

<!ENTITY % crl_ent PUBLIC "crl.ent" 'http://www.crifan.com/files/res/docbook/entity/crl.ent'>
%crl_ent;

]>

<chapter
    xmlns="http://docbook.org/ns/docbook"
    xmlns:xi="http://www.w3.org/2001/XInclude"
    xmlns:xl="http://www.w3.org/1999/xlink"
    
    xml:id="ch03_beautifulsoup_notes">
<title>BeautifulSoup使用注意事项</title>
<abstract></abstract>

<sect1 xml:id="beautifulsoup_tag_attr"><title>BeautifulSoup的Tag的属性</title>
    <para>BeautifulSoup处理这种html源码：</para>
    <programlisting language="html"><![CDATA[<a href="http://creativecommons.org/licenses/by/3.0/deed.zh" target="_blank">版权声明</a>]]></programlisting>
    <para>后，是可以通过</para>
    <programlisting>soup.a['href']</programlisting>
    <para>去获得对应的href属性值的。</para>
    <para>但是，想要去获得当前的某个未知的BeautifulSoup.Tag中，一共存在多少个属性，以及每个属性的值的时候，却不知道如何下手了。</para>
    <para>比如对于如下html源码：</para>
    <programlisting language="html"><![CDATA[<p class="cc-lisence" style="line-height:180%;">......</p>]]></programlisting>
    <para>想要得知，一共有两个属性，分别是class和style，然后就可以通过上面的方法，去获得对应的属性值了。</para>
    <para>对此问题，虽然看到了官网的解释：<link xl:href="http://www.crummy.com/software/BeautifulSoup/bs3/documentation.zh.html#The%20attributes%20of%20Tags">Tags的属性</link>中的<quote>你可以将Tag看成字典来访问标签的属性</quote></para>
    <para>但是还是无法通过：</para>
    <programlisting>if("class" in soup)</programlisting>
    <para>的方式去判断soup中是否存在class属性，因为此时soup是Beautifulsoup.Tag类型变量，而不是dict变量。</para>
    <para>并且，如果去强制将soup转换成为dict变量：</para>
    <programlisting>soupDict = dict(soup)</programlisting>
    <para>会报错的。</para>
    <para>最后，还是无意间发现，原来Beautifulsoup.Tag是有个attrs属性的，其可以获得对应的元组列表，每一个元组是对应属性名和属性值：</para>
    <programlisting>
attrsList = soup.attrs;
print "attrsList=",attrsList;
    </programlisting>
    <screen>attrsList= [(u'class', u'cc-lisence'), (u'style', u'line-height:180%;')]</screen>
    <para>这样，就可以从元组列表中，自己去转换，获得属性的列表或字典变量了，就可以接着按照自己意愿去处理了。</para>
    <para></para>
    <tip>
        <para>另外，此处也通过<screen>soup.name</screen>获得了该tag的名字</para>
        <para>而想要获得整个soup变量所有的属性和方法的话，可以用经典的dir去打印出来:</para>
        <programlisting>print "dir(soup)=",dir(soup);</programlisting>
        <para>此处的打印输出为：</para>
        <screen>
dir(soup)= ['BARE_AMPERSAND_OR_BRACKET', 'XML_ENTITIES_TO_SPECIAL_CHARS', 'XML_SPECIAL_CHARS_TO_ENTITIES', '__call__', '__contains__', '__delitem__', '__doc__', '__eq__', '__getattr__', '__getitem__', '__init__', '__iter__', '__len__', '__module__', '__ne__', '__nonzero__', '__repr__', '__setitem__', '__str__', '__unicode__', '_convertEntities', '_findAll', '_findOne', '_getAttrMap', '_invert', '_lastRecursiveChild', '_sub_entity', 'append', 'attrMap', 'attrs', 'childGenerator', 'containsSubstitutions', 'contents', 'convertHTMLEntities', 'convertXMLEntities', 'decompose', 'escapeUnrecognizedEntities', 'extract', 'fetch', 'fetchNextSiblings', 'fetchParents', 'fetchPrevious', 'fetchPreviousSiblings', 'fetchText', 'find', 'findAll', 'findAllNext', 'findAllPrevious', 'findChild', 'findChildren', 'findNext', 'findNextSibling', 'findNextSiblings', 'findParent', 'findParents', 'findPrevious', 'findPreviousSibling', 'findPreviousSiblings', 'first', 'firstText', 'get', 'has_key', 'hidden', 'insert', 'isSelfClosing', 'name', 'next', 'nextGenerator', 'nextSibling', 'nextSiblingGenerator', 'parent', 'parentGenerator', 'parserClass', 'prettify', 'previous', 'previousGenerator', 'previousSibling', 'previousSiblingGenerator', 'recursiveChildGenerator', 'renderContents', 'replaceWith', 'setup', 'substituteEncoding', 'toEncoding']
        </screen>
        <para>有需要的话，可以对这些属性和方法，都尝试一下，以便更加清楚其含义。</para>
        <para>刚写完上面这句话呢，然后自己随便测试了一下attrMap：</para>
        <programlisting language="python">
attrMap = soup.attrMap;
print "attrMap=",attrMap;
        </programlisting>
        <para>然后就很惊喜的发现，原来此处的attrMap，就是我程序中所需要的属性的dict变量啊：</para>
        <screen>attrMap= {u'style': u'line-height:180%;', u'class': u'cc-lisence'}</screen>
        <para>这样，就又省去了我程序中将attrs转换为dict变量的操作了，更加提高了效率。在次感谢Beautifulsoup的开发者。</para>
    </tip>
</sect1>

<sect1 xml:id="beautifulsoup_invalid_html"><title>BeautifulSoup有时候会遇到非法的，不支持的html源码而导致无法解析或无法正常解析html</title>
    <para>在使用Beautifulsoup过程中，对于大多数html源码，通过指定正确的编码，或者本身是默认UTF-8编码而无需指定编码类型，其都可以正确解析html源码，得到对应的soup变量。</para>
    <para>然后就接着去利用soup实现你所想要的功能了。</para>
    <para>但是有时候会发现，有些html解析后，有些标签等内容丢失了，即所得到的soup不是所期望的完整的html的内容。</para>
    <para>这时候，很可能遇到了非法的html，即其中可能包含了一些不合法的html标签等内容，导致Beautifulsoup虽然可以解析，没有报错，但是实际上得到的soup变量，内容缺失了一部分了。</para>
    <para>比如我就遇到过不少这样的例子：</para>
    <orderedlist>
        <listitem>部分Blogbus的帖子的html中非html5和html5的代码混合导致Beautifulsoup解析错误
            <para>之前在<link xl:href="http://www.crifan.com/record_add_blogbus_for_blogstowordpress/">为BlogsToWordPress添加Blogbus支持</link>过程中去解析Blogbus的帖子的时候，遇到一个特殊的帖子：<link xl:href="http://ronghuihou.blogbus.com/logs/89099700.html" />，其中一堆的非html5的代码中，包含了这样一段html5的代码的写法，即标签属性值不加括号的：</para>
            <programlisting language="html">
<![CDATA[
<SCRIPT language=JavaScript> 
document.oncontextmenu=new Function("event.returnValue=false;"); //禁止右键功能,单击右键将无任何反应 
document.onselectstart=new Function( "event.returnValue=false;"); //禁止先择,也就是无法复制 
</SCRIPT language=JavaScript>
]]>
            </programlisting>
            <para>结果导致Beautifulsoup解析错误，得到的soup中，找不到所需要的各种class等属性值。</para>
            <para>对应的解决办法就是，把这部分的代码删除掉，然后再解析就可以了：</para>
            <para>其中一堆的非html5的代码中，包含了这样一段html5的代码的写法，即标签属性值不加括号的：</para>
            <programlisting language="python">
<![CDATA[
foundInvliadScript = re.search("<SCRIPT language=JavaScript>.+</SCRIPT language=JavaScript>", html, re.I | re.S );
logging.debug("foundInvliadScript=%s", foundInvliadScript);
if(foundInvliadScript):
    invalidScriptStr = foundInvliadScript.group(0);
    logging.debug("invalidScriptStr=%s", invalidScriptStr);
    html = html.replace(invalidScriptStr, "");
    logging.debug("filter out invalid script OK");

soup = htmlToSoup(html);
]]>
            </programlisting>
        </listitem>
        <listitem>判断浏览器版本的相关代码，导致Beautifulsoup解析不正常
            <para>之前在给<link xl:href="http://www.crifan.com/crifan_released_all/website/python/blogstowordpress/">BlogsToWordpress</link>添加新浪博客的支持的过程中</para>
            <para>遇到很多新浪博客的帖子的html中，包含很多判断浏览器版本的相关代码：</para>
            <programlisting language="html">
<![CDATA[
<!–[if lte IE 6]>
xxx
xxx
<![endif]–>
]]>
            </programlisting>
            <para>由此导致Beautifulsoup解析html不正常。</para>
        </listitem>
        <listitem>font标签嵌套层次太多，导致Beautifulsoup无法解析html
            <para>接上面那个解析新浪博客帖子的例子，期间又遇到另外一个问题，对于一些特殊帖子：<link xl:href="http://blog.sina.com.cn/s/blog_5058502a01017j3j.html" /></para>
            <para>其包含特殊的好几十个font标签且是一个个嵌套的代码，导致无法Beautifulsoup无法解析html，后来把对应嵌套的font标签删除掉，才可以正常解析。</para>
            <para>相关python代码为：</para>
            <programlisting language="python">
<![CDATA[
# handle special case for http://blog.sina.com.cn/s/blog_5058502a01017j3j.html
processedHtml = processedHtml.replace('<font COLOR="#6D4F19"><font COLOR="#7AAF5A"><font COLOR="#7AAF5A"><font COLOR="#6D4F19"><font COLOR="#7AAF5A"><font COLOR="#7AAF5A">', "");
processedHtml = processedHtml.replace("</FONT></FONT></FONT></FONT></FONT></FONT>", "");
]]>
            </programlisting>
        </listitem>
    </orderedlist>
    
    <para>遇到其他类似的问题，也可以去删除或替换出错代码，即可解决问题。</para>
    <para>不过需要说明的是，很多时候，你未必很容易就找到出错的代码。</para>
    <para>想要找到出错的代码，更多的时候，需要你一点点调试，一点点的删除看似可疑的一些html源码，然后最终才能定位到出错的代码，然后删除掉后，才可以正常工作的。</para>
</sect1>

</chapter>